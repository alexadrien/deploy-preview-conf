version: 2
jobs:
  install:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "client/package.json" }}
      - run: cd client && npm install
      - run: ls client
      - save_cache:
          paths:
            - "client/node_modules"
          key: v5-dependencies-{{ checksum "client/package.json" }}
  build:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "client/package.json" }}
      - run: ls client
      - run: cd client && npm run-script build
      - save_cache:
          paths:
            - client/build
          key: v5-build-{{ .Environment.CIRCLE_SHA1 }}
  deploy:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v5-build-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd client && ls
      - run: cd client && sh deploy.sh
  pop_ec2:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v5-tfstate-{{ .Branch }}-
      - run: cd devops/terraform && terraform init
      - run: cd devops/terraform && terraform plan -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
      - run: cd devops/terraform && terraform apply --auto-approve -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
      - run: cd devops/terraform && echo 'export VERY_IMPORTANT=$(terraform output public_dns)' >> $BASH_ENV
      - save_cache:
          paths:
            - devops/terraform/terraform.tfstate
          key: v5-tfstate-{{ .Branch }}-{{ epoch }}
          force: yes
  provision_ec2:
    docker:
      - image: ansible/ansible:default
    working_directory: ~/repo
    steps:
      - checkout
      - run: printenv
workflows:
  version: 2
#  build_install_deploy_master:
#    jobs:
#      - install:
#          filters:
#            branches:
#              only: master
#      - build:
#          requires:
#            - install
#          filters:
#            branches:
#              only: master
#      - deploy:
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
  build_install_deploy_other:
    jobs:
      - install:
          filters:
            branches:
              only: master
      - build:
          requires:
            - install
          filters:
            branches:
              only: master
      - pop_ec2:
          requires:
            - build
          filters:
            branches:
              only: master
      - provision_ec2:
          requires:
            - pop_ec2
          filters:
            branches:
              only: master
