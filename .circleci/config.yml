version: 2
jobs:
  install:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "client/package.json" }}
      - run: cd client && npm install
      - run: ls client
      - save_cache:
          paths:
            - "client/node_modules"
          key: v6-dependencies-{{ checksum "client/package.json" }}
  build:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v6-dependencies-{{ checksum "client/package.json" }}
      - run: ls client
      - run: cd client && npm run-script build
      - save_cache:
          paths:
            - client/build
          key: v6-build-{{ .Environment.CIRCLE_SHA1 }}
  deploy:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v6-build-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd client && ls
      - run: cd client && sh deploy.sh
  pop_ec2:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v6-tfstate-{{ .Branch }}-
      - run: cd devops/terraform && terraform init
      - run: cd devops/terraform && terraform plan -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
      - run: cd devops/terraform && terraform apply --auto-approve -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
      - run: cd devops/terraform && echo $(terraform output public_dns)
      - run: cd devops/terraform && echo $(terraform output public_dns) > ec2_public_dns
      - run: chmod 777 devops/terraform/terraform.tfstate
      - run: chmod 777 devops/terraform/ec2_public_dns
      - run: whoami
      - save_cache:
          paths:
            - devops/terraform/terraform.tfstate
            - devops/terraform/ec2_public_dns
          key: v6-tfstate-{{ .Branch }}-{{ epoch }}
      - save_cache:
          paths:
            - devops/terraform/terraform.tfstate
          key: v6-tfstate-sha1-{{ .Environment.CIRCLE_SHA1 }}
  erase_previous_ec2:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v6-tfstate-sha1-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd devops/terraform && terraform init
      - run: cd devops/terraform && terraform destroy --auto-approve -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
  provision_ec2:
    docker:
      - image: ansible/ansible-runner:latest
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v6-tfstate-{{ .Branch }}-
      - run: printenv
      - run: ls devops/terraform
      - run: echo "$(cat devops/terraform/ec2_public_dns) ansible_ssh_user=ubuntu" >> devops/ansible/tmp_hosts
      - run: cat devops/ansible/tmp_hosts
      - run: chmod 400 devops/ssh/deploy
      - run: cd devops/ansible && ansible-runner --inventory tmp_hosts -p playbook.yml run /root/repo/devops/ansible
  deploy_ec2:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/repo
    steps:
      - checkout
      - run: whoami
      - restore_cache:
          keys:
            - v6-build-{{ .Environment.CIRCLE_SHA1 }}
            - v6-tfstate-{{ .Branch }}-
      - restore_cache:
          keys:
            - v6-tfstate-{{ .Branch }}-
      - run: cd devops/terraform && ls
      - run: cd devops/terraform && export $TEMPORARY_EC2_URL=$(cat ec2_public_dns)
      - run: printenv
      - run: cd client && sh deploy_tmp.sh
  comment_bot:
    docker:
      - image: circleci/node:8.10.0
    steps:
      - checkout
      - run: npm install circle-github-bot
      - run: ./bot.js
workflows:
  version: 2
#  build_install_deploy_master:
#    jobs:
#      - erase_previous_ec2:
#          filters:
#            branches:
#              only: master
#      - install:
#          filters:
#            branches:
#              only: master
#      - build:
#          requires:
#            - install
#          filters:
#            branches:
#              only: master
#      - deploy:
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
  build_install_deploy_other:
    jobs:
      - install:
          filters:
            branches:
              only: master
      - build:
          requires:
            - install
          filters:
            branches:
              only: master
      - pop_ec2:
          requires:
            - build
          filters:
            branches:
              only: master
      - provision_ec2:
          requires:
            - pop_ec2
          filters:
            branches:
              only: master
      - deploy_ec2:
          requires:
            - provision_ec2
          filters:
            branches:
              only: master
      - comment_bot:
          requires:
            - deploy_ec2
          filters:
            branches:
              only: master
